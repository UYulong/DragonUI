[{"/Users/wuyulong/ProjectDoc/dragon-ui/.eslintrc.js":"1","/Users/wuyulong/ProjectDoc/dragon-ui/src/App.vue":"2","/Users/wuyulong/ProjectDoc/dragon-ui/src/components/HelloWorld.vue":"3","/Users/wuyulong/ProjectDoc/dragon-ui/src/components/test.tsx":"4","/Users/wuyulong/ProjectDoc/dragon-ui/src/env.d.ts":"5","/Users/wuyulong/ProjectDoc/dragon-ui/src/main.ts":"6","/Users/wuyulong/ProjectDoc/dragon-ui/vite.config.ts":"7"},{"size":374,"mtime":1655627433298,"results":"8","hashOfConfig":"9"},{"size":628,"mtime":1655620551277,"results":"10","hashOfConfig":"9"},{"size":966,"mtime":1655620367190,"results":"11","hashOfConfig":"9"},{"size":43,"mtime":1655627918527},{"size":281,"mtime":1655620367191,"results":"12","hashOfConfig":"9"},{"size":90,"mtime":1655620367191,"results":"13","hashOfConfig":"9"},{"size":212,"mtime":1655627394166,"results":"14","hashOfConfig":"9"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o7yhhe",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wuyulong/ProjectDoc/dragon-ui/.eslintrc.js",[],[],"/Users/wuyulong/ProjectDoc/dragon-ui/src/App.vue",[],[],"/Users/wuyulong/ProjectDoc/dragon-ui/src/components/HelloWorld.vue",[],[],"/Users/wuyulong/ProjectDoc/dragon-ui/src/env.d.ts",[],["33","34","35"],"/Users/wuyulong/ProjectDoc/dragon-ui/src/main.ts",[],[],"/Users/wuyulong/ProjectDoc/dragon-ui/vite.config.ts",[],[],{"ruleId":"36","severity":2,"message":"37","line":6,"column":36,"nodeType":"38","messageId":"39","endLine":6,"endColumn":38,"suppressions":"40"},{"ruleId":"36","severity":2,"message":"37","line":6,"column":40,"nodeType":"38","messageId":"39","endLine":6,"endColumn":42,"suppressions":"41"},{"ruleId":"42","severity":1,"message":"43","line":6,"column":44,"nodeType":"44","messageId":"45","endLine":6,"endColumn":47,"suggestions":"46","suppressions":"47"},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage",["48"],["49"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["50","51"],["52"],{"kind":"53","justification":"54"},{"kind":"53","justification":"54"},{"messageId":"55","fix":"56","desc":"57"},{"messageId":"58","fix":"59","desc":"60"},{"kind":"53","justification":"54"},"directive","","suggestUnknown",{"range":"61","text":"62"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"61","text":"63"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[247,250],"unknown","never"]